ava.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {

    static class Step{
        int emoticon_num;  //화면 이모티콘 개수   
        int clipboard_num;  //클립보드 이모티콘 개수
        int time;  //작업의 걸리는 시간

        public Step(int emoticon_num, int clipboard_num, int time) {  
            this.emoticon_num = emoticon_num;
            this.clipboard_num = clipboard_num;
            this.time = time;
        }
    }

    static boolean[][] visited;
    static int S;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        S = Integer.parseInt(br.readLine());  //영선이가 만들려고하는 이모티콘의 개수

        visited = new boolean[2001][2001]; // 행: 화면 이모티콘의 개수, 열:클립보드 이모티콘 개수

        bfs();
    }

    public static void bfs() {
        Queue<Step> queue = new LinkedList<>();  //bfs를 위한 q
        queue.add(new Step(1, 0, 0));  //화면이모티콘 개수가 최소1이되지 못한다면 클립보드에 이모티콘을 복사하는 기능을 사용할 수 없으므로 화면에 보여주는 이모티콘을 기본 1로 놔두어야한다

        while (!queue.isEmpty()) {
            Step now = queue.poll();  

            int emoticon_num = now.emoticon_num;  //화면이모티콘의 개수
            int clipboard_num = now.clipboard_num;  //클립보드 이모티콘의개수
            int time = now.time;

            if(emoticon_num == S){  //화면의 이모티콘이 영선이가 만들려고하는 이모티콘의 개수와 같다면
                System.out.println(time);
                return;  
            }

            if(emoticon_num > 0 && emoticon_num < 2000){
                // 1. 복사
                if(!visited[emoticon_num][emoticon_num]){  //2차원배열 1열은 화면에 복사하는 이모티콘개수 2열은 클립보드에 복사된 이모티콘개수
                    visited[emoticon_num][emoticon_num] = true;

                    queue.offer(new Step(emoticon_num, emoticon_num, time + 1));
                }

                // 3. 삭제
                if (!visited[emoticon_num - 1][clipboard_num]) {  
                    visited[emoticon_num - 1][clipboard_num] = true;

                    queue.offer(new Step(emoticon_num - 1, clipboard_num, time + 1));
                }
            }

            // 2. 붙여넣기
            if (clipboard_num > 0 && emoticon_num + clipboard_num < 2000) {  //클립보드에서 화면에 이모티콘을 복사하므로  emoticon_num(기존에 화면에 있던 이모티콘 개수) + clipboard_num(클립보드에 있던 이모티콘의 개수)가 범위에서 벗어나지 말아야 한다
                if (!visited[emoticon_num+clipboard_num][clipboard_num]) {  //emoticon_num(기존에 화면에 있던 이모티콘 개수) + clipboard_num(클립보드에 있던 이모티콘의 개수)가 화면에 추가된다 
                    visited[emoticon_num+clipboard_num][clipboard_num] = true;

                    queue.offer(new Step(emoticon_num + clipboard_num, clipboard_num, time + 1));
                }
            }
        }