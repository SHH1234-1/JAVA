import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class Main {
    static int n; //첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 
    static int[] nums; //둘째 줄에는 A1, A2, ..., AN이 주어진다. 둘째 줄에 있는 수를 담기 위한 nums
    static int[] operator;  //셋째 줄에는 합이 N-1보다 크거나 같고, 4N보다 작거나 같은 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다.  부등호와 각 부등호의 개수 출력
    static int result_min = Integer.MAX_VALUE; //첫째 줄에 만들 수 있는 식의 결과의 최댓값을
    static int result_max = Integer.MIN_VALUE; //둘째 줄에는 최솟값을 출력한다. 

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());  //수의 개수
        nums = new int[n];  //수를 담기위한 nums 배열

        StringTokenizer st = new StringTokenizer(br.readLine());
        for(int i=0; i<n; i++){
            nums[i] = Integer.parseInt(st.nextToken()); //수를 nums 배열 안에 넣기
        }

        operator = new int[4];  //부등호의 개수를 담을 배열 operator
        st = new StringTokenizer(br.readLine()); 
        for(int i=0; i<4; i++){
            operator[i] = Integer.parseInt(st.nextToken());  //부등호의 개수를 나눠서 담음 부등호의 순서는 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수
        }
        
        dfs(1, nums[0]);  //사용된 수열의 개수 , 사용된 수열을 파라매터값으로 dfs

        System.out.println(result_max);
        System.out.println(result_min);
    }

    public static void dfs(int idx, int sum){
        if(idx==n){  //수열의 모든 수를 사용했을 경우
            result_min = Math.min(result_min, sum); //현재값과 미리저장된 작은 값 비교 후 최소값 구함
            result_max = Math.max(result_max, sum); //현재값과 미리저장된 작은 값 비교 후 최대값 구함
            return;
        }

        for(int i=0; i<4; i++){  //부등호의 개수 4개 반복 4번
            if(operator[i] == 0) continue;  //부등호를 모두 사용했을 경우 continue
            operator[i]--;  //사용한 부등호 개수 차감
            switch (i){
                case 0: //+
                    dfs(idx + 1, sum + nums[idx]); //수열 사용개수를 +1 +수열을 더해줌
                    break;
                case 1: //-
                    dfs(idx + 1, sum - nums[idx]); //수열 사용개수를 +1 +수열을 빼줌
                    break;
                case 2: // *
                    dfs(idx + 1, sum * nums[idx]); //수열 사용개수를 +1 +수열을 곱해줌
                    break;
                case 3: // /
                    dfs(idx + 1, sum / nums[idx]); //수열 사용개수를 +1 +수열을 곱해줌
                    break;
            }
            operator[i]++;  //
        }


    }

}

\