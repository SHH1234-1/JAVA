public class ApartNumberingBfs {
    private static int dx[] = {0,0,1,-1};
    private static int dy[] = {1,-1,0,0};
    private static int[] aparts = new int[25*25];
    private static int n;  //총단지수
    private static int apartNum = 0; //아파트 단지 번호의 수
    private static boolean[][] visited = new boolean[25][25]; //방문여부
    private static int[][] map = new int[25][25]; //지도

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();  //총단지수

        map = new int[n][n];
        visited = new boolean[n][n];

        //전체 사각형 입력 받기
        for(int i=0; i<n; i++){
            String input = sc.next();
            for(int j=0; j<n; j++){
                map[i][j] = input.charAt(j)-'0';
             }
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(map[i][j] == 1 && !visited[i][j]){
                    apartNum++;
                    bfs(i,j);
                }
            }
        }

        Arrays.sort(aparts);  //단지의 집의 수를 가진 배열 aparts를 오름차순으로 한줄
        System.out.println(apartNum);  //첫줄에는 단지내 집의 수를 출력

        for(int i=0; i<aparts.length; i++){
            if(aparts[i] == 0){  
            }else{
                System.out.println(aparts[i]);
            }
        }

}

    private static void bfs(int x, int y) {
        //2차원 LinkedList를 가진 큐 선언
        Queue<int[]> que = new LinkedList<>();
        que.add(new int[]{x,y});
        visited[x][y] = true;  //방문
        aparts[apartNum]++;  //총단지수 추가

        while(!que.isEmpty()){

            //x, y 값을 받아오기 위한 방법
            int curX = que.peek()[0];
            int curY = que.peek()[1];
            que.poll();

            for(int i=0; i<4; i++){  //현재 배열을 기준으로 인접한 배열을 상하좌우를 다 돌기 위한 for문 상하좌우를 돌아야하므로 4번돌아야함
                int nx = curX + dx[i];
                int ny = curY + dy[i];

                if(nx >= 0 && ny >= 0 && nx < n && ny < n){  //2차원 배열의 범위는 0부터 n까지
                    if(map[nx][ny] == 1 && !visited[nx][ny]){  //인접한 배열의 index가 1이고 방문이 되지 않았다면
                        que.add(new int[]{nx,ny});  //q에 추가
                        visited[nx][ny] = true;  //추가후 방문
                        aparts[apartNum]++;  //집의 수 카운트 추가
                    }
                }
            }
        }
    }
}