public class ApartNumberingDfs {
    private static int dx[] = {0,0,1,-1};  //집의 상하에 집이 인접해 있는가
    private static int dy[] = {1,-1,0,0};  //집의 좌우에에 집이 인접해 있는가
    private static int[] aparts = new int[25*25];
    private static int n;
    private static int apartNum = 0; //아파트 단지 번호의 수
    private static boolean[][] visited = new boolean[25][25]; //방문여부
    private static int[][] map = new int[25][25]; //지도

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();  //총단지수 입력

        map = new int[n][n];  //단지
        visited = new boolean[n][n];

        //전체 사각형 입력 받기
        for(int i=0; i<n; i++){
            String input = sc.next();
            for(int j=0; j<n; j++){
                map[i][j] = input.charAt(j)-'0';  //단지를 2차원 배열에 넣기
            }
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(map[i][j] == 1 && !visited[i][j]){  //단지에 집이있다면
                    apartNum++;  //총단지수
                    dfs(i,j);  dfs
                }
            }
        }

        Arrays.sort(aparts);
        System.out.println(apartNum);

        for(int i=0; i<aparts.length; i++){
            if(aparts[i] == 0){
            }else{               
                System.out.println(aparts[i]);  //각 단지에 속하는 집의 개수 출력
            }
        }
    }

    private static void dfs(int x, int y) {  //현재 집의 위치를 파라매터값으로 보냄
        visited[x][y] = true;  //방문체크
        aparts[apartNum]++;  //단지내 집의 수

        for(int i=0; i<4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(nx >=0 && ny >=0 && nx < n && ny < n){  //-1행이 되면 안되고 지도의 크기보다 크면 안되므로
                if(map[nx][ny] == 1 && !visited[nx][ny]){  //방문하지 않았을 경우
                    dfs(nx,ny);  //dfs로 계속 방문
                }
            }
        }
    }
}