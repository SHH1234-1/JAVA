package chapter1;
public class NumbersTest {
	public static void main(String[] args) {
		int size=100;  //배열의 크기
		int data[]=new int[size];
		for(int i=0; i<size; i++) {
			data[i]=(int)(Math.random()*100); //배열안에 들어갈 수
			}
		Numbers obj = new Numbers(data); //Number 클래스의 obj 객체 생성하고 Number클래스의 생성자에 배열을 보냄
		obj.display(); //
		System.out.printf("Arithmetic Mean : %5.2f\n", obj.getArithmaticMean());
		System.out.printf("Geometric Mean : %5.2f\n", obj.getGeometricMean());		
		obj.drawHistogram(0,100,10);  //int start, int end, int binCount
}
}

package chapter1;
public class Numbers {
	int num[];
	Numbers(int num[]) {  //생성자 (data)
		this.num = num;
	}
	double getTotal() {
		double sum=0;
		for(int i=0; i<num.length; i++) {
			sum+=num[i];
			}
		return sum;
	}
	double getArithmaticMean() {
		return getTotal()/num.length;
	}
	double getHarmonicMean() {
		double har=0;
		for(int i=0;i<7;i++) {
			har=har+(1/(this.num[i]));
		}
		double division=1/(har/7);
		return division;
	}
	double getGeometricMean() {
		int multi=1;
		for(int i=0;i<7;i++) {
			multi=multi*(this.num[i]);
		}
		double sqrt=Math.sqrt(multi);
		return sqrt;
	}	
	int getMedian() {
		if(num.length/2==0) {
			return (this.num[num.length/2]+this.num[(num.length/2)+1])/2;
		}
		else {
			return this.num[(num.length+1)/2];
		}
	}
	void sorting() {
		for(int a=0; a<num.length; a++) {
			for(int b=a+1; b<num.length; b++) {
				if(this.num[a]>this.num[b]) {
					int temp=this.num[a];
					this.num[a]=this.num[b];
					this.num[b]=temp;
				}
			}
		}
	}
	void drawHistogram(int start, int end, int binCount) {
		int a[]=new int[binCount+1];
		int b[]=new int[binCount+1];
		for(int k=0;k<binCount;k++) {  //시작점이 0 이고  10번 반복
			a[0]=0;
			a[k+1]=a[k]+binCount;
		}
		for(int n=0;n<binCount;n++) {
			b[0]=binCount;
			b[n+1]=b[n]+binCount;
		}
		for(int m=0;m<binCount;m++) {
			System.out.print(a[m]+"~"+b[m]+"\t");
			for(int j=1;j<=num.length;j++) {
				System.out.printf("#");
			}
			System.out.print("\n");
		}
	}
	void display() {
		System.out.printf("%3d :", num.length);		
		for(int i=0; i<num.length; i++) 
System.out.printf("%3d ", num[i]);
		System.out.println();
	}	
}
	
100 : 45  87  88  74  27  77  55  98  66  82  38  35  68  44  94  69  21  83  26  75  49  75  79   2  31  34  20  68  76  14  12  94  16  75  72  77  52  10  49  28  36  51  21  10  46  77   2  17  69  31  72  60   6  77  84  59  32  40  99  29  14  59  69  25  52  46  65  92  23   9  64  39  58  68  43  67  33  86  96  37  47  84  86  89   2  33  70   3  27  57  83  91  80   6  50  19  62  26  94  61 
Arithmetic Mean : 52.18
Geometric Mean :   NaN
0~10	####################################################################################################
10~20	####################################################################################################
20~30	####################################################################################################
30~40	####################################################################################################
40~50	####################################################################################################
50~60	####################################################################################################
60~70	####################################################################################################
70~80	####################################################################################################
80~90	####################################################################################################
90~100	####################################################################################################
