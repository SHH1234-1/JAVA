import java.util.*;
import java.io.*;

class Main {
    static int N, K;
    static int[] parent = new int[100001]; //수빈이의 이동위치를 담은 배열
    static int[] time = new int[100001];  //수빈이의 이동시간을 담은 배열

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());  //수빈이의 위치
        K = Integer.parseInt(st.nextToken());  //동생의 위치

        bfs();  //bfs

        // 순서대로 구하기 위해 stack 에 담았다가 다시 pop
        Stack<Integer> stack = new Stack<>();
        stack.push(K);  //동생의 위치와 수빈이의 위치가 같으므로 우선 stack에 동생의 위치를 넣음
        int index = K;

        while (index != N) { stack안에 마지막에 나오는 수가 동생의 위치와 같은 수빈이의 위치이므로 중복을 없애기 위함
            stack.push(parent[index]);
            index = parent[index];
        }

        // 최종 출력
        sb.append(time[K] - 1 + "\n");
        while (!stack.isEmpty()) {
            sb.append(stack.pop() + " ");
        }

        System.out.println(sb.toString());
    }

    static void bfs() {
        Queue<Integer> q = new LinkedList<Integer>();  //bfs를 위한q
        q.add(N);  //q에 현재 수빈이의 위치를 담음
        time[N] = 1;  //현재수빈이의 시작시간 원래는 0이지만 다른 위치의 방문체크를 0인지아닌지로 할것이므로 1로하고 나중에 최종걸린시간에서 1초를 빼준다

        while (!q.isEmpty()) {
            int now = q.poll();  //현재 수빈이의 위치

            if (now == K) return;  //수빈이의 위치와 동생의 위치가 같으면 return
            
            for (int i=0; i<3; i++) {  //수빈이가 이동가능한것은  X-1  X+1  2*X로 3가지 경우이므로 for문 3번돌림
                int next;  //이동할 위치 next변수

                if (i == 0)         next = now + 1; // X+1 
                else if (i == 1)    next = now - 1; //  X+1 
                else                next = now * 2;  // 2*X

                if (next < 0 || next > 100000) continue;  //다음에 이동할 위치가 범위를 벗어나면 continue

                if (time[next] == 0) {  //다음에 방문할 위치가 아직 방문하지 않았다면
                    q.add(next);  //다음위치를 현재위치로 하기 위해 다음위치를 q에 넣고
                    time[next] = time[now] + 1;  //현재걸린시간에서 +1초를 하여 다음 위치의 값으로 넣음
                    parent[next] = now;  //수빈이가 이동한 위치
                }
            }
        }
    }
}