import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class B2250 {
    final static Scanner scanner = new Scanner(System.in);
    // point : 현재 x좌표 (노드를 방문할 때 마다 +1 증가)
    static int point = 1; 
    static List<Node> tree = new ArrayList<>();  //노드 객체를 담든 ArrayList
    static int[] levelMin;  //각 레벨의 최소넓이  EX)레벨2의 최소 넓이 levelMin[2] = 최소넓이의 값;
    static int[] levelMax;  //각 레벨의 최대 넓이
    static int maxLevel = 0; // 트리의 최대 레벨(깊이)
    public static void main(String[] args) {
        int n = scanner.nextInt();  //너비가 가장 넓은 레벨
        levelMin = new int[n+1];  //너비가 가장 넓은 레벨 만큼의 배열의 크기를 가지는 배열 생성
        levelMax = new int[n+1];  ////너비가 가장 넓은 레벨 만큼의 배열의 크기를 가지는 배열 생성
        int rootIndex = 0;  //root노드 초기화
        for(int i =0; i<=n; i++) {
            tree.add(new Node(i, -1, -1));  //넓이가 가장 넓은 레벨수만큼 노드생성 생성된 노드의 왼쪽 오른쪽 인접노드는 -1로 초기화
            levelMin[i] = n; //i 레벨 n 왼쪽 좌표에서 가장 작은 넓이의 값
            levelMax[i] = 0;  //i 레벨 n 오른쪽 좌표에서 가장 큰 넓이의 값
        }
        for(int i = 0; i < n; i++) {
            int num = scanner.nextInt();  //현재노드
            int left = scanner.nextInt();  //왼쪽 인접 노드
            int right = scanner.nextInt();  //오른쪽 인접 노드
            tree.get(num).left = left; //tree list에 현재 입력한 노드 객체의 index안에 있는 node(현재 노드)를 가져와서 scanner로 입력한 left값을 현재노드 left값을 넣어줌
            tree.get(num).right = right;  //tree list에 현재 입력한 노드 객체의 index안에 있는 node(현재 노드)를 가져와서 scanner로 입력한 left값을 현재노드 left값을 넣어줌
            if(left != -1)  tree.get(left).parent = num; //현재노드에서 왼쪽에 인접한 노드가 있을 경우 왼쪽의 인접한 노드의 부모노드는 현재노드이다
            if(right != -1) tree.get(right).parent = num;  //현재노드에서 오른쪽에 인접한 노드가 있을 경우 오른쪽에 인접한 노드의 부모노드는 현재노드이다.
        }
        for(int i = 1; i<=n; i++) {  //1은 부모노드가 없으므로 
            if(tree.get(i).parent == -1) {  //현재노드에서 부모노드가 없으면
                rootIndex = i;  //1자체가 루트노드가 된다
                break;
            }
        }

        inOrder(rootIndex, 1); // inOrder(1,1);

        // 완성된 levelMax[]와 levelMin[]을 가지고 값을 뽑아내기
        int answerLevel = 1;
        int answerWidth = levelMax[1] - levelMin[1] + 1;  //첫번째는 레벨1부터 시작
        for (int i = 2; i<= maxLevel; i++) {  //레벨1은 어차피 1노드 하나뿐이므로 2부터 시작
            int width = levelMax[i] - levelMin[i] + 1;  //최대값에서 최소값을 빼고 + 1 넓이는 최대값 - 최소값 + 1
            if(answerWidth < width) {
                answerLevel = i;
                answerWidth = width;
            }
        }
        System.out.println(answerLevel + " " + answerWidth);
    }

    public static void inOrder(int rootIndex, int level) { //1은 그자체가 부모이므로 rootIndex = 1 1노드의 레벨은 1int level = 1
        Node root = tree.get(rootIndex);
        if(maxLevel < level) maxLevel = level;
        if(root.left != -1) {  //현재 노드에서 왼쪽에 인접한 노드가 없을때까지 
            inOrder(root.left, level + 1); //왼쪽에 인접한 노드를 현재노드로 바꾸고  레벨이 1올라감 
        }
        // 현재 레벨에서 현재 노드가 가장 왼쪽 노드라면 갱신
        levelMin[level] = Math.min(levelMin[level], point);  
        // 현재 노드는 이전노드보다 항상 x좌표가 더 높기 때문에 갱신
        levelMax[level] = point;
        point++;
        if(root.right != -1) {  //왼쪽을 다돌고 나면 오른쪽에 인접한 노드가 없을때까지 
            inOrder(root.right, level + 1);  //오른쪽에 인접한 노드를 현재노드로 바꾸고  레벨이 1올라감 
        }
    }

    static class Node {
        int parent;  //부모노드
        int num;  //자신의노드
        int left;  //왼쪽 노드
        int right;  //오른쪽 노드

        Node(int num, int left, int right) {
            this.parent = -1;  //루트가 무조건 1에서 시작하지 않으므로 현재 노드마다 부모노드가 바뀐다 그러므로 부모노드를-1로 초기화
            this.num = num;  //자신의 노드
            this.left = left;  //왼쪽노드
            this.right = right;  //오른쪽 노드
        }
    }
}