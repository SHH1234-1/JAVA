import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	
	static int[][] arr = new int[9][9]; //스도쿠를 담기 위한 2차원 배열
	
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); //입력
		
		for(int i = 0 ; i < 9 ; i++) {
		StringTokenizer str = new StringTokenizer(br.readLine()); //한줄읽고
		for(int j = 0 ; str.hasMoreTokens();j++) {
			arr[i][j]= Integer.parseInt(str.nextToken()); //수를 각 배열에 넣기
		}
		}

		dfs(0,0);
}
	public static void dfs(int row, int col) {  //각 행과열을 돌아다니면서 0~8까지 수가 있어야 하는 지 파악해야 하므로 dfs의 파라매터값은 행렬의 index
		
		if(col == 9) {  //행열은 0~8행까지 이므로 열이 9열이면 
			dfs(row+1,0); //행 교체
			return;
		}
		
		if(row == 9) { //8열까지 모두 다 끝났다면 
			StringBuilder sb = new StringBuilder(); sb객체 생성
			for (int i = 0; i < 9; i++) {
				for (int j = 0; j < 9; j++) {
					sb.append(arr[i][j]).append(' ');
				}
				sb.append('\n');
			}
			System.out.println(sb);
			
			System.exit(0);
		}
		
		if(arr[row][col]==0) {  //해당 배열의 index가 0 즉 스도쿠에 숫자가 들어있지 않으면
			for(int i = 1 ; i <= 9 ; i++) { //1부터 9중에 어떤 수가 들어가야하는지 확인을 위한 for
				if(check(row, col, i)) {  //현재 행과 현재 열 그리고 1~9까지를 파라매터 값으로 하는 check 메서드로 
					arr[row][col] = i;  //check에서 true를 받으면 해당열에 해당수를 넣고
					dfs(row, col+1);  //열 index를 +1하고 dfs
				}
			}
			arr[row][col]=0;
			return;
		}
		
		dfs(row, col+1);
	}
	
	public static boolean check(int row, int col, int value) {  //현재 행 현재 열 1~9까지 값
		
		//같은열에 무슨 숫자가 비었는지
		for(int i = 0 ; i < 9 ; i ++) { 
			if(arr[row][i] == value) {
				return false;
			}
		}
		
		//같은행에 무슨 숫자가 비었는지
		for(int i = 0 ; i < 9 ; i ++) {
			if(arr[i][col] == value) {
				return false;
			}
		}
		
		//같은 네모에 뭐가 있는지
		int ind_row = (row/3)*3;
		int ind_col = (col/3)*3;
		
		for(int i = ind_row ; i < ind_row+3 ; i ++) {
			for(int j = ind_col ; j < ind_col +3 ; j++) {
				if(arr[i][j] == value)
					return false;
			}
		}
		
		return true;
	}
	

}