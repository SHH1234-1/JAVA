import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Point {   // 체스판의 말의 현재위치와 이동하려고 하는 칸의 좌표를 저장하기 위한 class
	int x;
	int y;
	int cnt;

	Point(int x, int y) {
		this.x = x;
		this.y = y;
		cnt = 0;
	}

	Point(int x, int y, int cnt) {
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
}

public class Main {
	static int[] rangeX = { -1, -2, -2, -1, 1, 2, 2, 1 };  //말의 이동 xy좌표
	static int[] rangeY = { -2, -1, 1, 2, 2, 1, -1, -2 };

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;

		StringBuilder sb = new StringBuilder();

		int T = Integer.parseInt(br.readLine());  //테스트케이스
		while (T-- > 0) {  /t>0 t--
			int N = Integer.parseInt(br.readLine());  //체스판의 면적
			int[][] arr = new int[N][N];  //체스판의 크기를 가진 2차원배열

			Point[] points = new Point[2]; // 시작점과 끝점
			for (int i = 0; i < 2; i++) {
				st = new StringTokenizer(br.readLine());

				int start = Integer.parseInt(st.nextToken());
				int end = Integer.parseInt(st.nextToken());

				points[i] = new Point(start, end);  //시작점의 x좌표와 y좌표를 Point의 생성자에 넣고 point객체를 points 배열에 넣음
			}

			sb.append(BFS(arr, points, N) + "\n"); bfs
		}

		bw.write(sb.toString());
		bw.flush();
		bw.close();
		br.close();
	}

	public static int BFS(int[][] arr, Point[] points, int N) {
		Queue<Point> q = new LinkedList<>();
		q.offer(points[0]);

		boolean[][] visited = new boolean[N][N];
		visited[points[0].x][points[0].y] = true;  //체스판의 말의 시작점은 방문

		while (!q.isEmpty()) {
			Point p = q.poll();

			// 종료 조건
			if (p.x == points[1].x && p.y == points[1].y) {  //말이 도착지점에 도착했을 경우
				return p.cnt;  //이동횟수를 return
			}

			for (int i = 0; i < 8; i++) {   //말 이동
				int dx = p.x + rangeX[i];
				int dy = p.y + rangeY[i];

				// 범위가 벗어날 경우
				if (dx < 0 || dy < 0 || dx >= N || dy >= N) {  //체스판의 범위를 벗어날 경우
					continue;
				}

				if (!visited[dx][dy]) {  //이동한 말의 방문체크
					visited[dx][dy] = true;
					q.offer(new Point(dx, dy, p.cnt + 1));  
				}
			}
		}

		return -1;
	}

}