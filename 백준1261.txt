import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
 
class Point implements Comparable<Point> {
    int x;  //x좌표
    int y;  //y좌표
    int cnt; // 벽을 부순 개수
 
    Point(int x, int y, int cnt) {
        this.x = x;
        this.y = y;
        this.cnt = cnt;
    }
 
    @Override
    public int compareTo(Point o) {
        return cnt - o.cnt;
    }
}
 
public class Main {
    static int[] rangeX = { -1, 0, 1, 0 };  //y좌표 상하좌우
    static int[] rangeY = { 0, 1, 0, -1 };  //x좌표 상하좌우
    static int N, M;  //미로의 크기
    static int[][] map;  //미로를 담을 배열
 
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());  
 
        M = Integer.parseInt(st.nextToken()); // 가로
        N = Integer.parseInt(st.nextToken()); // 세로
 
        map = new int[N + 1][M + 1];
 
        for (int i = 1; i <= N; i++) {
            String input = br.readLine();
            for (int j = 1; j <= M; j++) {
                map[i][j] = Character.getNumericValue(input.charAt(j - 1));  //Character.getNumericValue 숫자형태의 char형을 int형으로 변환
            }
        }
 
        int ans = BFS(1, 1);  //BFS 시작위치는 미로의 1 1 좌표부터
 
        bw.write(ans + "\n");
        bw.flush();
        bw.close();
        br.close();
    }
 
    public static int BFS(int x, int y) {  //파라매터값 x좌표 y좌표
        // 벽을 부순 개수를 오름차순으로 정렬하도록 설정.
        PriorityQueue<Point> q = new PriorityQueue<>();
 
        q.offer(new Point(x, y, 0));
        boolean[][] visit = new boolean[N + 1][M + 1];  //좌표를 방문했는지 안했는지 여부를 판단하기 위한 visit배열
        visit[x][y] = true;  //첫번째 미로방 방문여부
 
        int dx, dy;  //현재 미로방에서 인접한 미로방의 x y좌표
        while (!q.isEmpty()) {
            Point p = q.poll();
 
            // 도착점에 도달했으면 종료.
            if (p.x == N && p.y == M) {  
                return p.cnt;
            }
 
            for (int i = 0; i < 4; i++) {  //이동은 상하좌우이므로 반복은 4번
                dx = p.x + rangeX[i];
                dy = p.y + rangeY[i];
 
                if (dx < 1 || dy < 1 || dx > N || dy > M) {  //현재 좌표가 미로좌표의 범위를 넘길경우
                    continue;
                }
 
                if (!visit[dx][dy] && map[dx][dy] == 0) {  //미로방에 방문하지 않았으면서 미로의 상태가 0 빈방인 경우 
                    visit[dx][dy] = true;  //방문 
                    q.offer(new Point(dx, dy, p.cnt));  //현재좌표를 q에 넣어줌
                }
 
                if (!visit[dx][dy] && map[dx][dy] == 1) {
                    visit[dx][dy] = true;
                    q.offer(new Point(dx, dy, p.cnt + 1));
                }
            }
        }
        return 0;
    }
 
}
